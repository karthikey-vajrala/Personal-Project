import json
from tabulate import tabulate
import matplotlib.pyplot as plt

# File handling
DATA_FILE = 'budget_data.json'

def load_data():
    try:
        with open(DATA_FILE, 'r') as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {'salary': None, 'entries': []}

def save_data(data):
    with open(DATA_FILE, 'w') as file:
        json.dump(data, file)

# Core functionalities
def reset_budget():
    save_data({'salary': None, 'entries': []})
    print("Budget data has been reset.")

def set_salary(salary):
    try:
        salary = float(salary)
        data = load_data()
        data['salary'] = salary
        save_data(data)
        print(f"Monthly Net Salary set to: ${salary:.2f}")
    except ValueError:
        print("Invalid salary. Please enter a numeric value.")

def add_entry(category, amount):
    try:
        amount = float(amount)
        data = load_data()
        data['entries'].append({'category': category, 'amount': amount})
        save_data(data)
        print(f"Added entry: Category={category}, Amount=${amount:.2f}")
    except ValueError:
        print("Invalid amount. Please enter a numeric value.")

def display_summary():
    data = load_data()
    salary, entries = data.get('salary'), data.get('entries')

    if not entries and salary is None:
        print("\nNo data available.")
        return

    # Calculate totals per category and overall spending
    category_totals = {}
    for entry in entries:
        category_totals[entry['category']] = category_totals.get(entry['category'], 0) + entry['amount']
    
    total_spent = sum(category_totals.values())
    table_data = [
        [category, amount, (amount / salary) * 100 if salary else 0]
        for category, amount in category_totals.items()
    ]

    # Display the table
    print("\n" + "=" * 60)
    print(tabulate(table_data, headers=["Category", "Amount Spent", "Percentage of Salary"], tablefmt="grid"))
    if salary:
        print("=" * 60)
        print(f"{'Total Spent:':<30} | ${total_spent:>14,.2f} | ({(total_spent / salary) * 100:.2f}%)")
    print("=" * 60)

    # Visualizations
    if category_totals:
        plt.figure(figsize=(10, 6))
        plt.bar(category_totals.keys(), category_totals.values(), color='skyblue', edgecolor='black')
        plt.title('Spending by Category')
        plt.xlabel('Category')
        plt.ylabel('Amount Spent ($)')
        plt.xticks(rotation=45, ha='right')
        plt.tight_layout()
        plt.show()
    
    if salary:
        plt.figure(figsize=(6, 6))
        plt.pie([total_spent, max(salary - total_spent, 0)], labels=['Spent', 'Remaining'], 
                colors=['tomato', 'lightgreen'], autopct='%1.1f%%', startangle=140)
        plt.title('Salary Usage')
        plt.show()

# Menu-driven interface
def main():
    actions = {
        '1': lambda: set_salary(input("Enter your Monthly salary: ")),
        '2': lambda: add_entry(input("Enter category: "), input("Enter amount: ")),
        '3': display_summary,
        '4': reset_budget,
    }

    while True:
        print("\nOptions:")
        print("1. Set Monthly Net Salary")
        print("2. Add Entry Of Expense")
        print("3. Display Summary & Overview")
        print("4. Reset")
        print("5. Exit")
        choice = input("Choose an option (1-5): ")

        if choice == '5':
            break
        action = actions.get(choice)
        if action:
            action()
        else:
            print("Invalid option. Please choose again.")

input("Press Enter to exit...")

